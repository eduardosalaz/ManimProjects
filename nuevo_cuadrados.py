from manimlib.imports import *
class TitleCard(Scene):
    def construct(self):
        credito = TextMobject("{\\fontsize{5}{10}\\selectfont @eduardosalaz}").to_corner(DR).set_color(GRAY)
        self.add(credito)
        titulo1 = TextMobject("{\\fontsize{30}{30}\\selectfont Álgebra Básica}").to_edge(UP)
        titulo2 = TextMobject("{\\fontsize{30}{30}\\selectfont Visualizada}").next_to(titulo1, DOWN, buff=0.5)
        self.play(Write(titulo1))
        self.play(Write(titulo2))
        self.wait(2)
        self.play(FadeOutAndShiftDown(titulo1, UP), FadeOutAndShiftDown(titulo2, LEFT))
        self.wait(1)

class MostrarEjemplo(Scene):
    def construct(self):
        credito = TextMobject("{\\fontsize{5}{10}\\selectfont @eduardosalaz}").to_corner(DR).set_color(GRAY)
        self.add(credito)
        text1 = TextMobject("{\\Large $2^2$\\ }", "{\\Large $= $}", "{\\Large   1*3+1\\ }").move_to(UP * 1.5 + RIGHT * 0.4)
        self.play(Write(text1))
        lhs1 = TextMobject("{\\Large 4\\ }").move_to(UP * 1.5 + LEFT * 0.9).set_color(BLUE)
        rhs1 = TextMobject("{\\Large 3 + 1\\ }").move_to(UP * 1.5 + RIGHT * 1.3).set_color(RED)
        self.play(text1[0].set_color, BLUE, text1[2].set_color, RED, runtime=1)
        self.play(ReplacementTransform(text1[0], lhs1), run_time=0.75)
        self.play(ReplacementTransform(text1[2], rhs1), run_time=0.75)
        self.wait(1)
        self.play(FadeOutAndShiftDown(lhs1, DOWN), FadeOutAndShiftDown(rhs1, DOWN), FadeOutAndShiftDown(text1[1], DOWN))
        text2 = TextMobject("{\\Large $3^2$\\ }", "{\\Large $= $}", "{\\Large   2*4+1\\ }").move_to(
            UP * 1.5 + RIGHT * 0.4)
        self.play(Write(text2))
        lhs2 = TextMobject("{\\Large 9\\ }").move_to(UP * 1.5 + LEFT * 0.9).set_color(BLUE)
        rhs2 = TextMobject("{\\Large 8 + 1\\ }").move_to(UP * 1.5 + RIGHT * 1.3).set_color(RED)
        self.play(text2[0].set_color, BLUE, text2[2].set_color, RED, runtime=1)
        self.play(ReplacementTransform(text2[0], lhs2), run_time=0.75)
        self.play(ReplacementTransform(text2[2], rhs2), run_time=0.75)
        self.wait(1)
        self.play(FadeOutAndShiftDown(lhs2, DOWN), FadeOutAndShiftDown(rhs2, DOWN), FadeOutAndShiftDown(text2[1], DOWN))
        text3 = TextMobject("{\\Large $8191^2$\\ }", "{\\Large $= $}", "{\\Large   8190*8192+1\\ }").move_to(
            UP * 1.5 + RIGHT * 1.1)
        self.play(Write(text3))
        lhs3 = TextMobject("{\\Large 67092481\\ }").move_to(UP * 1.5 + LEFT * 1.7).set_color(BLUE)
        rhs3 = TextMobject("{\\Large 67092480 + 1\\ }").move_to(UP * 1.5 + RIGHT * 2.5).set_color(RED)
        self.play(text3[0].set_color, BLUE, text3[2].set_color, RED, run_time=1)
        self.play(ReplacementTransform(text3[0], lhs3), run_time=0.75)
        self.play(ReplacementTransform(text3[2], rhs3), run_time=0.75)
        self.wait(1)
        self.play(FadeOutAndShiftDown(lhs3, DOWN), FadeOutAndShiftDown(rhs3, DOWN), FadeOutAndShiftDown(text3[1], DOWN))
        self.wait(1)

class DemostrarIdentidad(Scene):
    def construct(self):
        credito = TextMobject("{\\fontsize{5}{10}\\selectfont @eduardosalaz}").to_corner(DR).set_color(GRAY)
        self.add(credito)
        text1 = TextMobject("{\\Large Repasando Álgebra de secundaria \\ }").move_to(UP*2.5)
        self.play(Write(text1))
        identidad1 = TextMobject("{\\Large$(a+$\\ }", "{\\Large$b)$\\ }",
                                "{\\Large$(a-$\\ }", "{\\Large$b)$\\ }", "{\\Large$=$\\ }",
                                "{\\Large$a^2$\\ }", "{\\Large$-b^2$\\ }").move_to(UP)
        self.play(Write(identidad1))
        self.wait(2)
        text2 = TextMobject("{\\ Sea $n$ un número determinado \n y asignando $b = 1$\\ }").move_to(UP*2.5)
        self.play(ReplacementTransform(text1, text2), run_time=1.25)
        self.wait(2)
        identidad2 = TextMobject("{\\Large$(n+$\\ }", "{\\Large$1)$\\ }",
                                 "{\\Large$(n-$\\ }", "{\\Large$1)$\\ }", "{\\Large$=$\\ }",
                                 "{\\Large$n^2$\\ }", "{\\Large$-1$\\ }").move_to(UP)
        self.play(ReplacementTransform(identidad1, identidad2), run_time=3)
        self.wait(2)
        text3 = TextMobject("{\\ Despejando para $n^2$\\ }").move_to(UP*2.5)
        self.play(ReplacementTransform(text2, text3))
        self.wait(2)
        grupo_mover = VGroup(identidad2[0], identidad2[1], identidad2[2], identidad2[3])
        uno_suelto = TextMobject("{\\Large $+1$ \\ }").move_to(UP*1 + RIGHT*0.3)
        self.play(grupo_mover.shift, LEFT, ReplacementTransform(identidad2[6], uno_suelto))
        self.wait(2)
        text4 = TextMobject("{\\ Obtenemos así nuestra identidad\\ }").move_to(UP*2.5)
        todo_junto = VGroup(identidad2, uno_suelto)
        self.play(ReplacementTransform(text3, text4))
        self.play(todo_junto.set_color, YELLOW, todo_junto.shift, RIGHT, run_time=2)
        self.wait(2)
        self.play(FadeOutAndShift(text4, DOWN), run_time=1.5)
        self.wait(2)
        self.play(FadeOutAndShift(todo_junto, DOWN), run_time=1.5)
        self.wait(1)

class PruebaVisual(Scene):
    def construct(self):
        credito = TextMobject("{\\fontsize{5}{10}\\selectfont @eduardosalaz}").to_corner(DR).set_color(GRAY)
        self.add(credito)
        text1 = TextMobject("{\\Large Ahora una prueba visual \\ }").move_to(UP * 2.5)
        self.play(Write(text1))
        cuad_35 = Square().scale(0.3).set_color(GREEN)
        cuad_36 = Square().scale(0.3).set_color(GREEN).next_to(cuad_35, RIGHT, buff=0)
        cuad_34 = Square().scale(0.3).set_color(GREEN).next_to(cuad_35, LEFT, buff=0)
        cuad_31 = Square().scale(0.3).set_color(GREEN).next_to(cuad_34, DOWN, buff=0)
        cuad_32 = Square().scale(0.3).set_color(GREEN).next_to(cuad_35, DOWN, buff=0)
        cuad_33 = Square().scale(0.3).set_color(GREEN).next_to(cuad_36, DOWN, buff=0)
        cuad_37 = Square().scale(0.3).set_color(GREEN).next_to(cuad_34, UP, buff=0)
        cuad_38 = Square().scale(0.3).set_color(GREEN).next_to(cuad_35, UP, buff=0)
        cuad_39 = Square().scale(0.3).set_color(GREEN).next_to(cuad_36, UP, buff=0)
        todo = VGroup(cuad_31, cuad_32, cuad_33, cuad_34, cuad_35, cuad_36, cuad_37, cuad_38, cuad_39)
        self.play(FadeIn(todo))
        abajo = VGroup(cuad_31, cuad_32, cuad_33)
        izquierda = VGroup(cuad_31, cuad_34, cuad_37)
        brace_abajo = Brace(abajo, DOWN, buff=SMALL_BUFF)
        brace_izquierda = Brace(izquierda, LEFT, buff=SMALL_BUFF)
        text_brace_abajo = brace_abajo.get_text("$n$").set_color(GREEN)
        text_brace_izquierda = brace_izquierda.get_text("$n$").set_color(GREEN)
        self.play(GrowFromCenter(brace_abajo), GrowFromCenter(brace_izquierda), FadeIn(text_brace_abajo),
                  FadeIn(text_brace_izquierda))
        self.wait(1)
        n_por_n = TextMobject("{\\ $n*n=n^2$\\ }").move_to(LEFT * 5).set_color(GREEN)
        las_ns = VGroup(text_brace_abajo, text_brace_izquierda)
        self.play(TransformFromCopy(las_ns, n_por_n))
        rotar = VGroup(cuad_33, cuad_36, cuad_39)
        self.wait(1)
        self.play(FadeToColor(rotar, RED))
        self.play(Rotate(rotar, PI/2))
        self.play(rotar.shift, UP*1.2+LEFT*0.6)
        self.wait(2)
        los_dos = VGroup(cuad_39, cuad_36)
        self.play(FadeToColor(los_dos, GREEN))
        ya_completos = VGroup(cuad_31, cuad_34, cuad_37, cuad_39)
        reducidos = VGroup(cuad_31, cuad_32)
        brace_abajo_nueva = Brace(reducidos, DOWN, buff=SMALL_BUFF)
        brace_izquierda_nueva = Brace(ya_completos, LEFT, buff=SMALL_BUFF)
        text_brace_abajo_nueva = brace_abajo_nueva.get_text("$n-1$").set_color(GREEN)
        text_brace_izquierda_nueva = brace_izquierda_nueva.get_text("$n+1$").set_color(GREEN)
        grupo_viejo = VGroup(brace_abajo, brace_izquierda, text_brace_abajo, text_brace_izquierda)
        grupo_nuevo = VGroup(brace_abajo_nueva, brace_izquierda_nueva, text_brace_abajo_nueva,
                             text_brace_izquierda_nueva)
        self.play(Transform(grupo_viejo, grupo_nuevo))
        self.wait(1)
        self.play(cuad_33.shift, RIGHT*0.3)
        self.wait(1)
        mas_uno = TextMobject("{\\ $+1$\\ }").move_to(RIGHT * 1.6+UP*1.2).set_color(RED)
        self.play(TransformFromCopy(cuad_33, mas_uno))
        self.wait(1)
        tex_final = TexMobject("(n+1)", "(n-1)", "+1", "=n^2").move_to(RIGHT * 3.5).set_color(RED)
        self.play(TransformFromCopy(text_brace_izquierda_nueva, tex_final[0]))
        self.play(TransformFromCopy(text_brace_abajo_nueva, tex_final[1]))
        self.play(TransformFromCopy(mas_uno, tex_final[2]))
        self.play(TransformFromCopy(todo, tex_final[3]))
        self.wait(2)
        todo_ahora_si = VGroup(text1, tex_final, todo, grupo_viejo, n_por_n, mas_uno)
        self.play(FadeOut(todo_ahora_si))
        self.wait(1)
        final = TextMobject("{\\Large¿Preguntas? \\ }")
        self.play(Write(final))
        self.wait(2)
        self.play(FadeOut(final))
        self.wait(1)

